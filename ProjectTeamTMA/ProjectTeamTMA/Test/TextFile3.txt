using AutoMapper;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using ProjectTeamTMA.DBContexts;
using ProjectTeamTMA.Model;
using ProjectTeamTMA.Repository;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace ProjectTeamTMA.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class BookRoomController : ControllerBase
    {
        private readonly BookRoomRepository bookRoomRepository;
        private readonly IMapper _mapper;
        private MyDBContext myDbContext;
        public BookRoomController(MyDBContext _context, IMapper mapper)
        {
            _mapper = mapper;
            bookRoomRepository = new BookRoomRepository(_context);
            this.myDbContext = _context;
        }

        [HttpGet]
        public async Task<ActionResult<IEnumerable<BookRoomViewModel>>> List2()
        {
            var bookRoom1 = await bookRoomRepository.ListAsync2();
            IEnumerable<BookRoomViewModel> bookRoom = new List<BookRoomViewModel>();
            _mapper.Map(bookRoom1, bookRoom);
            return Ok(bookRoom);
        }

        //[Authorize(Roles = "User")]
        //[HttpPost]
        //public async Task<IActionResult> Create(BookRoomViewModel model)
        //{
        //    BookRoom bookRoom = new BookRoom();
        //    var startDayBr = DateTime.Parse(model.startDay);
        //    var endDateBr = DateTime.Parse(model.endDate);

        //    //string Kq = DateTime.Compare(model.endDate);

        //    if (startDayBr >= endDateBr)
        //    {
        //        //return mgs.Message = "Please enter the Day time";
        //        return Redirect("Please enter the Day time");
        //    }
        //    else
        //    {
        //        bookRoom.personBookingId = model.personBookingId;
        //        bookRoom.roomId = model.roomId;
        //        bookRoom.issue = model.issue;
        //        bookRoom.startDay = DateTime.Parse(model.startDay);
        //        bookRoom.endDate = DateTime.Parse(model.endDate);
        //        bookRoom.startTime = DateTime.Parse(model.startTime);
        //        bookRoom.endTime = DateTime.Parse(model.endDate);
        //        bookRoom.createdTime = DateTime.Parse(model.createdTime);
        //        bookRoom.updatedTime = DateTime.Parse(model.updatedTime);
        //    }
        //    await bookRoomRepository.AddAsync(bookRoom);
        //    return Ok(bookRoom.Id);
        //}


        [Authorize(Roles = "Admin")]
        [HttpPut("{id}")]
        public async Task<IActionResult> BookRoomApproved(BookRoomViewModel model, Guid id)
        {
            var bookRoom = await myDbContext.BookRooms.FindAsync(id);
            bookRoom.Id = model.Id;
            bookRoom.personalApprovedId = model.personalApprovedId;
            bookRoom.personBookingId = model.personBookingId;
            bookRoom.issue = model.issue;
            bookRoom.status = model.status;
            bookRoom.createdTime = DateTime.Parse(model.createdTime);
            bookRoom.startTime = DateTime.Parse(model.startTime);
            bookRoom.startDay = DateTime.Parse(model.startDay);
            bookRoom.endDate = DateTime.Parse(model.endDate);
            bookRoom.endTime = DateTime.Parse(model.endTime);
            bookRoom.roomId = model.roomId;
            bookRoom.updatedTime = DateTime.Parse(model.updatedTime);
            await bookRoomRepository.UpdateAsync(bookRoom);
            return Ok(bookRoom);
        }
        // status = Accept and Reject

        [HttpDelete("{id}")]
        public async Task<IActionResult> Delete(BookRoom bookRoom)
        {
            await bookRoomRepository.DeleteAsync(bookRoom);
            return Ok(bookRoom.Id);
        }

        [HttpPost]
        public async Task<IActionResult> Create(BookRoomViewModel model)
        {
            BookRoom bookRoom = new BookRoom();
            var startDayBr = DateTime.Parse(model.startDay);
            var endDateBr = DateTime.Parse(model.endDate);

            var starTimebr = DateTime.Parse(model.startTime);
            var endTimeBr = DateTime.Parse(model.endTime);

            var query1 = (from br in myDbContext.BookRooms
                          where br.roomId == model.roomId
                          select new { br.startDay, br.endDate, br.startTime,br.endTime }).ToList();

            foreach (var item in query1)
            {
                if (item.endDate > startDayBr)
                {
                    return Redirect("Please enter the Day time");
                }
                else if (item.endTime > starTimebr)
                {
                    return Redirect("Please enter the Day time");
                }
                else if (startDayBr >= endDateBr)
                {
                    return Redirect("Please enter the Day time");
                }
                else if (starTimebr >= endTimeBr)
                {
                    return Redirect("Please enter the Day time");
                }
                else
                {
                    bookRoom.personBookingId = model.personBookingId;
                    bookRoom.roomId = model.roomId;
                    bookRoom.issue = model.issue;
                    bookRoom.startDay = DateTime.Parse(model.startDay);
                    bookRoom.endDate = DateTime.Parse(model.endDate);
                    bookRoom.startTime = DateTime.Parse(model.startTime);
                    bookRoom.endTime = DateTime.Parse(model.endDate);
                    bookRoom.createdTime = DateTime.Parse(model.createdTime);
                    bookRoom.updatedTime = DateTime.Parse(model.updatedTime);
                }
            }
            await bookRoomRepository.AddAsync(bookRoom);
            return Ok(bookRoom.Id);
        }
    }
}

